<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on House of Eternity</title>
    <link>http://localhost:41409/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on House of Eternity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Apr 2024 08:32:01 +0800</lastBuildDate>
    <atom:link href="http://localhost:41409/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPP特点-输出长度与精度控制-指针与常量</title>
      <link>http://localhost:41409/cpp/cpp%E7%89%B9%E7%82%B9-%E8%BE%93%E5%87%BA%E9%95%BF%E5%BA%A6%E4%B8%8E%E7%B2%BE%E5%BA%A6%E6%8E%A7%E5%88%B6-%E6%8C%87%E9%92%88%E4%B8%8E%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Thu, 28 Mar 2024 19:50:14 +0800</pubDate>
      <guid>http://localhost:41409/cpp/cpp%E7%89%B9%E7%82%B9-%E8%BE%93%E5%87%BA%E9%95%BF%E5%BA%A6%E4%B8%8E%E7%B2%BE%E5%BA%A6%E6%8E%A7%E5%88%B6-%E6%8C%87%E9%92%88%E4%B8%8E%E5%B8%B8%E9%87%8F/</guid>
      <description>面向对象语言特点 # 抽象 类 -&amp;gt; 抽象 对象 -&amp;gt; 具体 封装 成员变量(私) 成员函数(公) 继承 多态 cpp向下兼容c语言 #cpp中不允许/**/嵌套使用 #cout&amp;lt;&amp;lt;_LINE_&amp;lt;&amp;lt;~~; # 显示该语句位于源程序第几行 通常只有规模很小(一般为1~5条语句)而频繁使用函数才定义为内联函数 #输出长度与精度控制 ##include &amp;lt;iomainip&amp;gt; //std::setw cout&amp;lt;&amp;lt;setw(10);限制输出长度为10 cout&amp;lt;&amp;lt;setprecision(5)&amp;lt;&amp;lt;~;//限制输出精度 cout&amp;lt;&amp;lt;fixed;//用定点数表示法表示浮点数 cpp中函数可以重载.</description>
    </item>
    <item>
      <title>逻辑代数公式及最简表达式</title>
      <link>http://localhost:41409/cpp/3/</link>
      <pubDate>Mon, 01 Apr 2024 08:32:01 +0800</pubDate>
      <guid>http://localhost:41409/cpp/3/</guid>
      <description>逻辑代数公式 # 分配律 \(A\cdot(B+C)=A\cdot B+A\cdot C\) \(A+B \cdot C=(A+B)\cdot(A+C)\) 同一律 \(A\cdot A=A\) \( A+A=A \) 德摩根定理 \(\overline{A\cdot B}=\overline{A}+\overline{B}\) \(\overline{A+B}=\overline{A}\cdot \overline{B}\) 还原律 \(\overline{\overline{A}}=A\) 若干常用公式 \(A\cdot B+A\cdot \overline{B}=A\) \(A+A\cdot B=A\) \(A+\overline{A}\cdot B=A+B\) \(A\cdot B+\overline{A}\cdot C+B\cdot C=A\cdot B+\overline{A}\cdot C\) 逻辑函数的最简表达式 #最简与或式 # 定义: 乘积项的个数最少,每个乘积项中相乘的变量个数也最少的与或表达式,称为最简与或式 最简与非-与非式 # 定义: 非号个数最少,每个非号下面相乘的变量个数也最少的与非-与非式,称为最简与非-与非式 求法: 在最简与或表达式的基础上,两次取反,再用德摩根定理去掉下面的反号,便可得到 最简或与式 # 定义: 括号个数最少,每个括号中相加的变量的个数也最少的或与式,称为最简或与式 求法: 在反函数最简与或式的基础上,取反,再用德摩根定理去掉反号,便可得到函数的最简或与式 最简或非-或非式 # 定义:非号个数最少,每个非号下面相加的变量个数也最少的或非-或非式,称为最简或非-或非表达式 求法:在最简或与表达式的基础上,两次取反,再用德摩根定理去掉下面的反号,所得到的便是函数的最简或非-或非表达式 最简与或非表达式 # 定义:在非号下面相加的乘积项个数最少,每个乘积项中相乘的变量个数也最少的与或非式,称为最简与或非表达式 求法:在最简或非-或非式的基础上,用德摩根定理去掉大反号下面的小反号,便可得到函数的最简与或非表达式 逻辑函数表示方法 #真值表 # 把变量的各种可能取值与相应的函数值,以表格形式一一列举出来.</description>
    </item>
    <item>
      <title>作用域运算符-联合-强转-内存动态分配-引用</title>
      <link>http://localhost:41409/cpp/2/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Fri, 29 Mar 2024 08:28:56 +0800</pubDate>
      <guid>http://localhost:41409/cpp/2/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</guid>
      <description>k## 作用域运算符::</description>
    </item>
    <item>
      <title>逗号语句执行-默认值相关-函数重载</title>
      <link>http://localhost:41409/cpp/1/%E9%80%97%E5%8F%B7%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C-%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 28 Mar 2024 20:20:59 +0800</pubDate>
      <guid>http://localhost:41409/cpp/1/%E9%80%97%E5%8F%B7%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C-%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9B%B8%E5%85%B3/</guid>
      <description>逗号语句执行 #printf(&amp;quot;%d&amp;quot;,(int a=3*5,a*4,a+5));</description>
    </item>
  </channel>
</rss>
