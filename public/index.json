[{"content":"面向对象语言特点 # 抽象 类 -\u0026gt; 抽象 对象 -\u0026gt; 具体 封装 成员变量(私) 成员函数(公) 继承 多态 cpp向下兼容c语言 #cpp中不允许/**/嵌套使用 #cout\u0026lt;\u0026lt;_LINE_\u0026lt;\u0026lt;~~; # 显示该语句位于源程序第几行 通常只有规模很小(一般为1~5条语句)而频繁使用函数才定义为内联函数 #输出长度与精度控制 ##include \u0026lt;iomainip\u0026gt; //std::setw\rcout\u0026lt;\u0026lt;setw(10);限制输出长度为10\rcout\u0026lt;\u0026lt;setprecision(5)\u0026lt;\u0026lt;~;//限制输出精度\rcout\u0026lt;\u0026lt;fixed;//用定点数表示法表示浮点数 cpp中函数可以重载.只要函数参数的类型不同,or参数的个数不同,或者二者兼而有之,两个or两个以上的函数可以使用相同的函数名 #指向常量的指针 #const char *name =\u0026quot;chen\u0026quot;;\n*name 是常量(name不允许改变) name[3]='a' ; is ERROR name是指向常量的指针变量(指针name本身可以改变) name =\u0026quot;zhang\u0026quot;; is RIGHT 指向字符串的常指针 #char* const name =\u0026quot;chen\u0026quot;;\nname是常量(name不允许改变) 指针的地址不允许改变 name = \u0026quot;zhang\u0026quot; is ERROR 指向常量的常指针 #const char* const name =\u0026quot;chen\u0026quot;;\n","date":"28 March 2024","permalink":"/cpp/cpp%E7%89%B9%E7%82%B9-%E8%BE%93%E5%87%BA%E9%95%BF%E5%BA%A6%E4%B8%8E%E7%B2%BE%E5%BA%A6%E6%8E%A7%E5%88%B6-%E6%8C%87%E9%92%88%E4%B8%8E%E5%B8%B8%E9%87%8F/","section":"CPPs","summary":"面向对象语言特点 # 抽象 类 -\u0026gt; 抽象 对象 -\u0026gt; 具体 封装 成员变量(私) 成员函数(公) 继承 多态 cpp向下兼容c语言 #cpp中不允许/**/嵌套使用 #cout\u0026lt;\u0026lt;_LINE_\u0026lt;\u0026lt;~~; # 显示该语句位于源程序第几行 通常只有规模很小(一般为1~5条语句)而频繁使用函数才定义为内联函数 #输出长度与精度控制 ##include \u0026lt;iomainip\u0026gt; //std::setw\rcout\u0026lt;\u0026lt;setw(10);限制输出长度为10\rcout\u0026lt;\u0026lt;setprecision(5)\u0026lt;\u0026lt;~;//限制输出精度\rcout\u0026lt;\u0026lt;fixed;//用定点数表示法表示浮点数 cpp中函数可以重载.","title":"CPP特点-输出长度与精度控制-指针与常量"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/cpp/","section":"Tags","summary":"","title":"CPP"},{"content":"","date":null,"permalink":"/cpp/","section":"CPPs","summary":"","title":"CPPs"},{"content":"","date":null,"permalink":"/","section":"House of Eternity","summary":"","title":"House of Eternity"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"作用域运算符:: #说明 # 如果两个变量同名,一个全局的,一个局部的,那么局部变量在其作用域内具有较高的优先级 联合 #声明 #union data\r{\rint i;\rdouble d;\r}x; 访问时 x.i x.d 无名联合 # 是cpp中的特殊联合,它在关键字union后面没有给出联合名,它可使一组数据共用同一内存地址 结构体对齐\n强制类型转换 # OLD int i =10;\rfloat x=(float)i; NEW int 1=10;\rfloat x=float(i); new与delete运算符 ####C语言内存动态分配\nint *p;\rp=(int*)malloc(sizeof(int));\rfree(p); CPP语言动态分配 #int *p;\rp=new int;\rdelete p; 用法 # 用new申请空间的格式 p = new type; 用delete释放所申请的空间格式 delete p; 特殊用法 # 用new分配内存的同时,可以用()指定其初始值,但不能为数组元素指定初值 int *p; p = new int(99); 用new建立多维数组类型的变量 p=new type[size][m][n]...[s]; int (*pi)[3][4]=new int [i*4][3][4]; 用new可为动态数组分配内存空间 p=new float[5];\rp=new int[m];\rp=new double[m+5*n]; new和delete应该配对使用 #引用(CPP独占) # 引用相当于为某个变量、常量、数组或对象起了一个别名 使用 # 如果引用不是用作函数的参数或返回值,则必须在说明时初始化 int i;\rint \u0026amp;j;\rj=i; is ERROR\nint i;\rint \u0026amp;j=i; is RIGHT\n不是任何类型的数据都可以引用 不允许建立void类型的引用 不允许建立引用的数组 不能建立引用的引用;不能建立指向引用的指针; ","date":"29 March 2024","permalink":"/cpp/2/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/","section":"CPPs","summary":"作用域运算符:: #说明 # 如果两个变量同名,一个全局的,一个局部的,那么局部变量在其作用域内具有较高的优先级 联合 #声明 #union data\r{\rint i;\rdouble d;\r}x; 访问时 x.","title":"作用域运算符-联合-强转-内存动态分配-引用"},{"content":"","date":null,"permalink":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"Categories","summary":"","title":"学习笔记"},{"content":"逗号语句执行 #printf(\u0026quot;%d\u0026quot;,(int a=3*5,a*4,a+5));\noutput\u0026gt;:20 在这个 printf 语句中，a=3 * 5 , a * 4,a+5 是一个逗号表达式。逗号表达式会依次计算其内部的子表达式，并返回最后一个子表达式的值。但是，逗号表达式的一个重要特性是，它会保证所有的子表达式（从左到右）都会被求值，并且除了最后一个子表达式的结果都会被丢弃\n带有默认(缺省)参数的函数 # 缺省函数必须从左往右定义,并且在一个缺省参数的右边不能有未指定的缺省值的参数. 定义 # 在函数定义or函数声明中指定了初始值的参数称为默认参数 int special(int x=5,float y=5.3); 初始化 # 可定义为任意的初始化表达式,可以包含函数调用以及全局变量等 int fun (int w=sqrt(a),int x=a*a); 说明 # void fun(int w,int x=1 ,int y=1,int z=1) is RIGHT\nvoid fun(int w,int x=1 ,int y, int z=1) is ERROR\n规则 # 如果函数定义在前,函数调用在后,在函数定义处写默认值 如果函数调用在前,函数定义在后,在函数声明处写默认值,函数定义处不要写 函数重载与默认值 #说明 # 缺省函数必须从右往左定义,并且在一个缺省参数的右边不能有未指定的缺省值的参数 void fun(int w,int x ,int y=1 );\rvoid fun(int w,int x ); 该段代码有歧义若参数为 2,3 以上两种方式均合适产生二义性导致报错 ","date":"28 March 2024","permalink":"/cpp/1/%E9%80%97%E5%8F%B7%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C-%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9B%B8%E5%85%B3/","section":"CPPs","summary":"逗号语句执行 #printf(\u0026quot;%d\u0026quot;,(int a=3*5,a*4,a+5));","title":"逗号语句执行-默认值相关-函数重载"},{"content":"本博客由22年部署现迁移至github+hugo # 原地址：https://emiya-omega.gitlab.io ","date":"27 March 2024","permalink":"/posts/test/test/","section":"Posts","summary":"本博客由22年部署现迁移至github+hugo # 原地址：https://emiya-omega.","title":"About"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/categories/%E6%9D%82%E6%96%87/","section":"Categories","summary":"","title":"杂文"}]